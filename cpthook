#!/usr/bin/env python

import logging
import os.path
import sys

import cpthook


def parse_options():
    import optparse
    parser = optparse.OptionParser()
    parser.add_option("-c", "--config", dest="config_file", metavar="FILE",
                      default="hook.cfg", help="cpthook config file")
    parser.add_option("-v", "--verbose", dest="verbose", default=False,
                      action="store_true",
                      help="log verbose status information")
    parser.add_option("-d", "--debug", dest="debug", default=False,
                      action="store_true",
                      help="log debug information")
    parser.add_option("--dry-run", dest="dryrun", default=False,
                      action="store_true",
                      help="perform a dry run, making no changes")
    parser.add_option("--init", dest="init", default=False,
                      action="store_true",
                      help="install configured hooks and repositories")
    parser.add_option("--hook", dest="hook", default=None,
                      help="the hook to run against the current repository")
    options, args = parser.parse_args()
    return options, args


def validate_options(opts):
    if not os.path.isfile(opts.config_file):
        print 'No config file "{0}"'.format(opts.config_file)
        sys.exit(-1)

    if opts.init and opts.hook:
        print 'Cannot install to repos and be invoked as a hook'
        sys.exit(-1)


def handle_options():
    opts, args = parse_options()
    validate_options(opts)

    if opts.debug:
        log_level = logging.DEBUG
    elif opts.verbose:
        log_level = logging.INFO
    else:
        log_level = logging.WARN
    logging.getLogger().setLevel(log_level)

    return opts, args


if __name__ == '__main__':
    # Any positional args returned by optparse are intended for
    # the hook script to be invoked.
    opts, hook_args = handle_options()

    config = cpthook.CptHookConfig(opts.config)
